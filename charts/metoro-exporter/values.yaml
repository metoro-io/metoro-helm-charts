environment: "none"


exporter:
  name: "metoro-exporter"
  replicas: 2
  otlpUrl: "http://change_me:4317"
  metadataUrl: "http://change_me:4317"
  apiServerUrl: "http://change_me:4317"
  clickhouseUrl: "change_me:9000"
  clickhouseDatabase: "change_me"
  clickhouseUser: "change_me"
  prometheusUrl: "http://change_me:9090"
  shouldDropMetoroData: true
  image:
    tag: "latest"
    repository: index.docker.io/metoro/metoro-exporter
    pullPolicy: "Always"
  # Placeholder configmap
  configMap:
    name: "exporter-config"
    values:
      config.yml: |-
        Some Config Key
  serviceAccount:
    name: "metoro-exporter"
  clusterRole:
    name: "metoro-exporter-cluster-role"
  clusterRoleBinding:
    name: "metoro-exporter-cluster-role-binding"
  resources:
    limits:
      cpu: "1"
    requests:
      cpu: "100m"
      memory: "1Gi"

instrumentationWebhook:
  secretName: "metoro-instrumentation-webhook-secret"
  name: "metoro-instrumentation-webhook"
  replicas: 2
  image:
    tag: "latest"
    repository: index.docker.io/metoro/metoro-instrumentation-webhook
    pullPolicy: "Always"
  service:
    name: "metoro-instrumentation-webhook"
    port: 80
    targetPort: 8080
    type: "ClusterIP"
  mutatingWebhookConfiguration:
    autoGenerateCert:
      enabled: true
      recreate: false
      certPeriodDays: 3650
    certManager:
        enabled: false
    name: "metoro-instrumentation-webhook.metoro.io"
  serviceAccount:
    name: "metoro-instrumentation-webhook"
  clusterRole:
    name: "metoro-instrumentation-webhook-cluster-role"
  clusterRoleBinding:
    name: "metoro-instrumentation-webhook-cluster-role-binding"
  resources:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "10m"
      memory: "64Mi"

otelInstrumentation:
  enabled: true

exporterSecret:
  name: "exporter-secret"
  bearerToken: "CHANGE_ME"

opentelemetry-operator:
  enabled: false
  admissionWebhooks:
    certManager:
      enabled: false
    autoGenerateCert:
      enabled: true
  manager:
    collectorImage:
      repository: otel/opentelemetry-collector-k8s
    extraArgs:
      - "--enable-go-instrumentation=true"

coroot:
  enabled: true
  node-agent:
    tracesEndpoint: http://metoro-exporter-coroot:8080/v1/traces
    logsEndpoint: http://metoro-exporter-coroot:8080/v1/logs
    profilesEndpoint: http://metoro-exporter-coroot:8080/v1/profiles
    image:
      repository: index.docker.io/metoro/metoro-node-agent
      tag: "latest"
      pullPolicy: "Always"
    resources:
      requests:
        cpu: "100m"
        memory: "100Mi"
    limits:
        cpu: "1"
        memory: "1Gi"
  corootCE:
    image:
      repository: index.docker.io/metoro/metoro-cluster-server
      tag: "latest"
      pullPolicy: "Always"
    resources:
      requests:
        cpu: "100m"
        memory: "1Gi"
      limits:
        cpu: "1"
        memory: "2Gi"
  prometheus:
    enabled: true
    serverFiles:
      prometheus.yml:
        scrape_configs:
        - job_name: 'coroot-node-agent'
          honor_labels: true
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [ __meta_kubernetes_pod_label_app]
              action: keep
              regex: coroot-node-agent
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scheme ]
              action: replace
              regex: (https?)
              target_label: __scheme__
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
              action: replace
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - source_labels: [ __meta_kubernetes_pod_phase ]
              regex: Pending|Succeeded|Failed|Completed
              action: drop
            - source_labels: [__meta_kubernetes_pod_node_name]
              target_label: instance
              action: replace
    server:
      global:
        scrape_interval: "1m"
      remoteWrite:
        - url: "http://change_me:9090/api/v1/write"
          authorization:
            credentials: "CHANGE_ME"
          queue_config:
            max_samples_per_send: 5000
      retention: "15m"
      persistentVolume:
        enabled: false
      resources:
        requests:
          memory: "1Gi"
          cpu: "100m"
        limits:
          memory: "3Gi"
          cpu: "1"
  clickhouse:
    enabled: true
    server:
      resources:
        requests:
          memory: "1Gi"
          cpu: "100m"
        limits:
          memory: "3Gi"
          cpu: "1"
    persistence:
      enabled: false